{-# OPTIONS --rewriting  #-}

module PR-CC-Ctx-ind-alt where


open import Data.Fin using (Fin; zero; suc; inject+; raise)
open import Data.Vec.Properties using (lookup-++ ≥; lookup-++À°)
open import Data.Empty using (‚ä•)
open import Data.Unit using (‚ä§; tt)
open import Data.List using (List; [] ; _‚à∑_; concat)
open import Data.Nat using (‚Ñï; suc; zero; _+_)
open import Data.Nat.Properties using (+-suc)
open import Data.Vec using (Vec;[];_‚à∑_;lookup;_++_;map)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)
open import Function using (_‚àò_; const) renaming (id to identity)
import Relation.Binary.PropositionalEquality as Eq
open Eq
  using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; subst;cong-app)
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; step-‚â°Àò; step-‚â°; _‚àé)
open import Utils
open import HVec
open import Agda.Builtin.Equality.Rewrite
open import PR-CC-ind-alt using (Ty;PolyTyOp;sub‚ÇÄ;‚ü¶_‚üß‚Çö;‚ü¶_‚üß·µÄ;fold;fmap;foldF;helper;Fix )
open import EvalPConstructor using (para)
import System-T as ST



import PR-CC-ind-alt as PF
open PF.Ty
open PF.PolyTyOp

open PF.FromNats

TY : Set
TY  = PF.Ty



variable
  T U V : TY
  G : PF.PolyTyOp



Ctx : ‚Ñï ‚Üí Set
Ctx n = Vec TY n

data Exp : ‚àÄ {n : ‚Ñï} ‚Üí Ctx n ‚Üí TY ‚Üí Set where
  `0 :  ‚àÄ {n : ‚Ñï} {ctx : Ctx n} ‚Üí Exp ctx ( `ùüô)
  App  : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {tyA tyB} ‚Üí   Exp ctx (tyA ‚áí tyB) ‚Üí Exp ctx tyA ‚Üí Exp ctx tyB
  Var : ‚àÄ {n : ‚Ñï} {ctx : Ctx n}  ‚Üí (f : Fin n) ‚Üí Exp ctx (lookup ctx f)
  Lam  : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} { tyA tyB} ‚Üí Exp (tyA ‚à∑ ctx) tyB ‚Üí Exp ctx  (tyA ‚áí tyB)


--   --
  `# : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} { tyA tyB} ‚Üí Exp ctx tyA ‚Üí Exp ctx tyB ‚Üí Exp ctx (tyA `√ó tyB)
  œÄ‚ÇÅ : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} ‚Üí Exp ctx (U `√ó V) ‚Üí Exp ctx  U
  œÄ‚ÇÇ : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} ‚Üí Exp ctx (U `√ó V) ‚Üí Exp ctx  V
--   --
  Œπ‚ÇÅ :  ‚àÄ {n : ‚Ñï} {ctx : Ctx n} ‚Üí  Exp ctx U ‚Üí Exp ctx (U `+ V)
  Œπ‚ÇÇ : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} ‚Üí Exp ctx V ‚Üí Exp ctx (U `+ V)
  `case : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {tyA tyB tyC : TY} ‚Üí  Exp ctx (tyA `+ tyB) ‚Üí Exp (tyA ‚à∑ ctx) (tyC) ‚Üí Exp (tyB ‚à∑ ctx) (tyC) ‚Üí Exp (ctx) (tyC)

  fold : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {G} ‚Üí Exp ctx (sub‚ÇÄ (ind G) G) ‚Üí Exp ctx (ind G)
  -- P : (h : sub‚ÇÄ (T `√ó ind G) G `√ó U ‚Üí·¥æ T) ‚Üí (ind G `√ó U ‚Üí·¥æ T)
  -- P : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {G}{P} ‚Üí  Exp ctx ((sub‚ÇÄ P G) ‚áí P) ‚Üí Exp ctx (ind G) ‚Üí Exp ctx P
  P : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {G}{P} ‚Üí  Exp ctx ((sub‚ÇÄ P G) ‚áí P) ‚Üí Exp ctx (ind G ‚áí  P)


-- {-# REWRITE   helper #-}

-- {-# TERMINATING #-}
eval : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {ty} ‚Üí Exp ctx ty ‚Üí  HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctx ‚Üí ‚ü¶ ty ‚üß·µÄ
eval `0 ctx = tt
eval (App f x) ctx = eval f ctx (eval x ctx)
eval (Var f) ctx = hlookup ctx f
eval (Lam exp) ctx = Œª x ‚Üí eval exp (x ‚à∑·¥¥ ctx)
eval (`# expL expR) ctx = ‚ü® eval expL ctx , eval expR ctx ‚ü©
eval (œÄ‚ÇÅ exp) ctx = proj‚ÇÅ (eval exp ctx)
eval (œÄ‚ÇÇ exp) ctx = proj‚ÇÇ (eval exp ctx)
eval (Œπ‚ÇÅ exp) ctx = inj‚ÇÅ ((eval exp ctx))
eval (Œπ‚ÇÇ exp) ctx = inj‚ÇÇ ((eval exp ctx))
eval (`case exp l r) ctx with eval exp ctx 
... | inj‚ÇÅ res = eval l (res ‚à∑·¥¥ ctx)
... | inj‚ÇÇ res = eval r (res ‚à∑·¥¥ ctx)
eval (fold exp) ctx = fold (eval exp ctx)
-- eval   (P {G = G} (e1') e2) ctx with eval  e2 ctx
-- ... | fold x = eval e1' ctx 
--                   (fmap  (Œª v ‚Üí {! eval  (Lam (P e1' (Var zero))) ctx !})   G x) 
eval   (P {G = G}{P = p} (e1')) ctx = foldF (eval e1' ctx) -- Œª { (fold x) ‚Üí eval e1' ctx (fmap (Œª v ‚Üí eval (P e1') ctx v) G x)}





{-# REWRITE   lookup-++À° #-}

postulate
  extensionality : ‚àÄ {A B : Set} {f g : A ‚Üí B}
    ‚Üí (‚àÄ (x : A) ‚Üí f x ‚â° g x)
      -----------------------
    ‚Üí f ‚â° g




weakenGenVar : ‚àÄ (n) (m) (o)‚Üí Fin (n + o) ‚Üí Fin (n + (m + o))
weakenGenVar zero m o f = raise m f
weakenGenVar (suc n) m o zero = zero
weakenGenVar (suc n) m o (suc f) = suc (weakenGenVar n m o f)

weakenGenVAr-lookup : ‚àÄ {A : Set} {n m o}  (ctxA : Vec A n)(ctxB : Vec A m)(ctxC : Vec A o) (f : Fin (n + o)) ‚Üí lookup (ctxA ++ ctxB ++ ctxC) (weakenGenVar   n m o f) ‚â° lookup (ctxA ++ ctxC) f  
weakenGenVAr-lookup [] ctxB ctxC f = lookup-++ ≥ ctxB ctxC f
weakenGenVAr-lookup (x ‚à∑ ctxA) ctxB ctxC zero = refl
weakenGenVAr-lookup (x ‚à∑ ctxA) ctxB ctxC (suc f) = weakenGenVAr-lookup ctxA ctxB ctxC f

{-# REWRITE   weakenGenVAr-lookup lookup-++ ≥ #-}

lookup-++ ≥·¥¥ : ‚àÄ {A : Set}{F : A ‚Üí Set} {n m} {xs : Vec A n} {ys : Vec A m} (hxs : HVec F xs)  (hys : HVec F ys)(f : Fin m )   ‚Üí hlookup (hxs ++·¥¥ hys) (raise n f) ‚â° hlookup hys f 
lookup-++ ≥·¥¥ []·¥¥ (x ‚à∑·¥¥ hys) zero = refl
lookup-++ ≥·¥¥ []·¥¥ (x ‚à∑·¥¥ hys) (suc f) = refl
lookup-++ ≥·¥¥ (x ‚à∑·¥¥ hxs) hys f = lookup-++ ≥·¥¥ hxs hys f


weakenGenVAr-hlookup :  ‚àÄ {A : Set}{F : A ‚Üí Set}{n m o}  {ctxA : Vec A n} {ctxB : Vec A  m} {ctxC : Vec A o} (valsA : HVec F ctxA ) (valsB : HVec F ctxB )(valsC : HVec F ctxC ) (f : Fin (n + o)) ‚Üí
  hlookup (valsA ++·¥¥ valsB ++·¥¥ valsC) (weakenGenVar n m o f) ‚â°
      hlookup (valsA ++·¥¥ valsC) f
weakenGenVAr-hlookup []·¥¥ valsB valsC f = lookup-++ ≥·¥¥ valsB valsC f
weakenGenVAr-hlookup (x ‚à∑·¥¥ valsA) valsB valsC zero = refl
weakenGenVAr-hlookup (x ‚à∑·¥¥ valsA) valsB valsC (suc f) = weakenGenVAr-hlookup valsA valsB valsC f


-- see : https://gitlab.com/goldfirere/stitch/-/blob/hs2020/src/Language/Stitch/Shift.hs
weakenGen : ‚àÄ {n m o}  (ctxA : Ctx n)(ctxB : Ctx m)(ctxC : Ctx o){tyA} ‚Üí Exp (ctxA ++ ctxC) tyA ‚Üí Exp (ctxA ++ ctxB ++ ctxC) tyA
weakenGen ctxA ctxB ctxC `0 = `0
weakenGen ctxA ctxB ctxC (App f x) = App (weakenGen ctxA ctxB ctxC f) (weakenGen ctxA ctxB ctxC x)
weakenGen {n} {m}  {o} ctxA ctxB ctxC (Var f) = Var (weakenGenVar  n m o f)
weakenGen ctxA ctxB ctxC (Lam {tyA = tyA } exp) = Lam (weakenGen (tyA ‚à∑ ctxA) ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (`# l r) = `# (weakenGen ctxA ctxB ctxC l) (weakenGen ctxA ctxB ctxC r)
weakenGen ctxA ctxB ctxC (œÄ‚ÇÅ exp) = œÄ‚ÇÅ (weakenGen ctxA ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (œÄ‚ÇÇ exp) = œÄ‚ÇÇ (weakenGen ctxA ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (Œπ‚ÇÅ exp) = Œπ‚ÇÅ (weakenGen ctxA ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (Œπ‚ÇÇ exp) = Œπ‚ÇÇ (weakenGen ctxA ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (`case {tyA = tyA}  {tyB = tyB} c l r) = `case (weakenGen ctxA ctxB ctxC c) (weakenGen (tyA ‚à∑ ctxA) ctxB ctxC l) ((weakenGen (tyB ‚à∑ ctxA) ctxB ctxC r))
weakenGen ctxA ctxB ctxC (fold exp) = fold (weakenGen ctxA ctxB ctxC exp)
weakenGen ctxA ctxB ctxC (P exp) = P (weakenGen ctxA ctxB ctxC exp)



weakenGenEq : ‚àÄ {n m o : ‚Ñï} {ctxA : Ctx n} {ctxB : Ctx m}{ctxC : Ctx o}  {tyA } (valsA : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctxA ) (valsB : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctxB )(valsC : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctxC ) (exp : Exp (ctxA ++ ctxC) tyA) ‚Üí 
      eval (weakenGen ctxA ctxB ctxC exp) (valsA ++·¥¥ valsB ++·¥¥ valsC ) ‚â° eval exp (valsA ++·¥¥ valsC)
weakenGenEq valsA valsB valsC `0 = refl
weakenGenEq valsA valsB valsC (App f x) rewrite weakenGenEq valsA valsB valsC f | weakenGenEq valsA valsB valsC x = refl
weakenGenEq valsA valsB valsC (Var f) = weakenGenVAr-hlookup valsA valsB valsC f
weakenGenEq valsA valsB valsC (Lam {tyA = tyA} exp) = extensionality (Œª x ‚Üí weakenGenEq (x ‚à∑·¥¥ valsA) valsB valsC exp)
weakenGenEq valsA valsB valsC (`# l r) = cong‚ÇÇ ‚ü®_,_‚ü© (weakenGenEq valsA valsB valsC l) (weakenGenEq valsA valsB valsC r)
weakenGenEq valsA valsB valsC (œÄ‚ÇÅ exp) = cong proj‚ÇÅ (weakenGenEq valsA valsB valsC exp)
weakenGenEq valsA valsB valsC (œÄ‚ÇÇ exp) = cong proj‚ÇÇ (weakenGenEq valsA valsB valsC exp)
weakenGenEq valsA valsB valsC (Œπ‚ÇÅ exp) = cong inj‚ÇÅ (weakenGenEq valsA valsB valsC exp)
weakenGenEq valsA valsB valsC (Œπ‚ÇÇ exp) = cong inj‚ÇÇ (weakenGenEq valsA valsB valsC exp)
weakenGenEq {n}{m}{o} {ctxA}{ctxB} {ctxC} valsA valsB valsC  (`case {tyA = tyA} {tyB = tyB} c l r) 
  rewrite sym (weakenGenEq  valsA valsB valsC c)
  with eval (weakenGen ctxA ctxB ctxC c) (valsA ++·¥¥ valsB ++·¥¥ valsC )
... | inj‚ÇÅ x  = weakenGenEq (x ‚à∑·¥¥ valsA) valsB valsC l
... | inj‚ÇÇ y = weakenGenEq (y ‚à∑·¥¥ valsA) valsB valsC r
weakenGenEq valsA valsB valsC (fold exp) = cong fold (weakenGenEq valsA valsB valsC exp)
weakenGenEq {n} {m} {o} {ctxA} {ctxB} {ctxC} valsA valsB valsC (P {G = G}{P = ty} exp) rewrite  sym ( weakenGenEq valsA valsB valsC exp)  = refl -- extensionality Œª {(fold x) ‚Üí refl }


weaken : ‚àÄ {n m : ‚Ñï} {ctx : Ctx n} {tyA } (ctx' : Ctx m)  ‚Üí  Exp ctx tyA ‚Üí Exp (ctx ++ ctx') tyA
weaken {ctx = ctx} ctx' exp = weakenGen ctx ctx' [] exp
-- weaken ctx `0 = `0
-- weaken ctx (App f x) = App (weaken ctx f) (weaken ctx x)
-- weaken {n} {m} {ctx} ctx' (Var f)  rewrite lookup-++À° ctx ctx' f = Var  {n + m}  ((inject+ m f)) 
-- weaken ctx (Lam exp) = Lam (weaken ctx exp)
-- weaken ctx (`# l r) = `# (weaken ctx l) (weaken ctx r)
-- weaken ctx (œÄ‚ÇÅ exp) = œÄ‚ÇÅ (weaken ctx exp)
-- weaken ctx (œÄ‚ÇÇ exp) = œÄ‚ÇÇ (weaken ctx exp)
-- weaken ctx (Œπ‚ÇÅ exp) = Œπ‚ÇÅ (weaken ctx exp)
-- weaken ctx (Œπ‚ÇÇ exp) = Œπ‚ÇÇ (weaken ctx exp)
-- weaken ctx (`case c l r) = `case (weaken ctx c) (weaken ctx l) (weaken ctx r) 
-- weaken ctx (fold exp) = fold (weaken ctx exp)
-- weaken ctx (P e1 ) = P (weaken ctx e1)





weaken-Eq : ‚àÄ {n m : ‚Ñï} {ctx : Ctx n} {ctx' : Ctx m}  {tyA } (vals : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctx ) (vals' : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctx' ) (exp : Exp ctx tyA) ‚Üí eval (weaken ctx' exp) (vals ++·¥¥ vals') ‚â° eval exp vals
weaken-Eq vals vals'  = weakenGenEq vals vals' []·¥¥ 


weaken' : ‚àÄ {m o} (ctxB : Ctx m){ctxC : Ctx o}{tyA} ‚Üí Exp ( ctxC) tyA ‚Üí Exp ( ctxB ++ ctxC) tyA
weaken' ctxB {ctxC} = weakenGen [] ctxB ctxC  


weaken'-Eq : ‚àÄ {m o : ‚Ñï}  {ctxB : Ctx m}{ctxC : Ctx o}  {tyA } (valsB : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctxB )(valsC : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctxC ) (exp : Exp ( ctxC) tyA) ‚Üí 
      eval (weaken' ctxB {ctxC} exp) (valsB ++·¥¥ valsC ) ‚â° eval exp (valsC)
weaken'-Eq valsB valsC  = weakenGenEq  []·¥¥  valsB valsC

PF‚ÜíNPF : ‚àÄ {tyA tyB : PF.TY} ‚Üí  tyA PF.‚Üí·¥æ tyB ‚Üí Exp [] ( tyA ‚áí  tyB )
PF‚ÜíNPF PF.`0 = Lam `0
PF‚ÜíNPF PF.id = Lam (Var zero)
PF‚ÜíNPF {tyA} {tyB} (PF.C f g) = Lam ( App (weaken [  tyA ] (PF‚ÜíNPF f)) (App (weaken [  tyA ]  (PF‚ÜíNPF g)) (Var zero))) 
PF‚ÜíNPF {tyA} {tyB} (PF.`# l r) = Lam (`# 
          (App (weaken [  tyA ] (PF‚ÜíNPF l)) (Var zero)) 
          (App (weaken [  tyA ] (PF‚ÜíNPF r)) (Var zero))) 
PF‚ÜíNPF PF.œÄ‚ÇÅ = Lam (œÄ‚ÇÅ (Var zero))
PF‚ÜíNPF PF.œÄ‚ÇÇ = Lam (œÄ‚ÇÇ (Var zero))
PF‚ÜíNPF PF.Œπ‚ÇÅ = Lam (Œπ‚ÇÅ ((Var zero)))
PF‚ÜíNPF PF.Œπ‚ÇÇ = Lam (Œπ‚ÇÇ ((Var zero)))
PF‚ÜíNPF {(U PF.`+ V)}  (PF.`case f g) = Lam (`case (Var zero) 
          (App (weaken (( U) ‚à∑ ( U `+  V ) ‚à∑ [])  (PF‚ÜíNPF f)) (Var zero)) 
          (App (weaken ( V ‚à∑  U `+  V ‚à∑ []) (PF‚ÜíNPF g)) (Var zero))) 
PF‚ÜíNPF PF.fold = Lam (fold (Var zero))
PF‚ÜíNPF {(ind G `√ó U)} (PF.P {T} {U} {G} h) = Lam (App (P (Lam (App ((weaken (sub‚ÇÄ T G ‚à∑ ind G `√ó U ‚à∑ []) (PF‚ÜíNPF h))) (`# {! P  !} ((œÄ‚ÇÇ (Var (suc zero)))))))) (œÄ‚ÇÅ (Var zero))) 
PF‚ÜíNPF (PF.F {T} {U} {G} exp) = Lam (App (P (Lam (App (weaken (sub‚ÇÄ T G ‚à∑ ind G `√ó U ‚à∑ []) (PF‚ÜíNPF exp)) (`# (Var zero) (œÄ‚ÇÇ (Var (suc zero))))))) (œÄ‚ÇÅ (Var zero))) 


-- Œª {(x , u) ‚Üí foldF (Œª gu ‚Üí eval h (fmap (Œª u' ‚Üí u' , x) G gu , u)) x}
--P : ‚àÄ {n : ‚Ñï} {ctx : Ctx n} {G}{P} ‚Üí  Exp ctx ((sub‚ÇÄ P G) ‚áí P) ‚Üí Exp ctx (ind G ‚áí  P)

PF‚ÜíNPF-sound-Helper : ‚àÄ {T} {U} {G} (f : sub‚ÇÄ T G `√ó U PR-CC-ind-alt.‚Üí·¥æ T) (x : ‚ü¶ sub‚ÇÄ T G ‚üß·µÄ ) (fst : Fix G) (snd : ‚ü¶ U ‚üß·µÄ) ‚Üí eval (weaken  (sub‚ÇÄ T G ‚à∑ ind G `√ó U ‚à∑ []) (PF‚ÜíNPF f)) (x ‚à∑·¥¥ ((‚ü® fst , snd ‚ü©) ‚à∑·¥¥ []·¥¥)) (‚ü® x , snd ‚ü©) ‚â° PR-CC-ind-alt.eval f (‚ü® x , snd ‚ü©)


PF‚ÜíNPF-sound : ‚àÄ {tyA tyB : PF.TY} ‚Üí  (f : tyA PF.‚Üí·¥æ tyB)  ‚Üí (arg : PF.‚ü¶ tyA ‚üß·µÄ  ) ‚Üí eval  (PF‚ÜíNPF f) []·¥¥  arg   ‚â° PF.eval f arg
PF‚ÜíNPF-sound PF.`0 args = refl
PF‚ÜíNPF-sound PF.id args = refl
PF‚ÜíNPF-sound (PF.C f g) arg rewrite  
  weaken-Eq []·¥¥ (arg ‚à∑·¥¥ []·¥¥)  (PF‚ÜíNPF g) | 
  weaken-Eq []·¥¥ (arg ‚à∑·¥¥ []·¥¥)  (PF‚ÜíNPF f) |
  PF‚ÜíNPF-sound g arg |
  PF‚ÜíNPF-sound f (PF.eval g arg) = refl 
PF‚ÜíNPF-sound {tyA} (PF.`# f g) arg rewrite weaken-Eq []·¥¥ (arg ‚à∑·¥¥ []·¥¥)(PF‚ÜíNPF f) | weaken-Eq []·¥¥ (arg ‚à∑·¥¥ []·¥¥)(PF‚ÜíNPF g) | PF‚ÜíNPF-sound g arg | PF‚ÜíNPF-sound f arg = refl 
PF‚ÜíNPF-sound PF.œÄ‚ÇÅ args = refl
PF‚ÜíNPF-sound PF.œÄ‚ÇÇ args = refl
PF‚ÜíNPF-sound PF.Œπ‚ÇÅ args = refl
PF‚ÜíNPF-sound PF.Œπ‚ÇÇ args = refl
PF‚ÜíNPF-sound {U PF.`+ V} (PF.`case f g) (inj‚ÇÅ x) rewrite weaken-Eq {ctx = []} {ctx' =  U ‚à∑  U `+  V ‚à∑ [] }  []·¥¥ (x ‚à∑·¥¥ ((inj‚ÇÅ x) ‚à∑·¥¥ []·¥¥))   (PF‚ÜíNPF f)  = PF‚ÜíNPF-sound f x 
PF‚ÜíNPF-sound {U PF.`+ V} (PF.`case f g) (inj‚ÇÇ y) rewrite weaken-Eq {ctx = []} {ctx' =  V ‚à∑  U `+  V ‚à∑ [] }  []·¥¥ (y ‚à∑·¥¥ (inj‚ÇÇ y ‚à∑·¥¥ []·¥¥)) (PF‚ÜíNPF g) = PF‚ÜíNPF-sound g y
PF‚ÜíNPF-sound PF.fold args = refl
PF‚ÜíNPF-sound (PF.P f) arg = {!   !}
PF‚ÜíNPF-sound (PR-CC-ind-alt.F  {T} {U} {G} f) (‚ü® fst , snd ‚ü©)   = cong‚ÇÇ foldF {u = fst} {v = fst} (extensionality (Œª x ‚Üí  ( PF‚ÜíNPF-sound-Helper f x fst snd))) refl

PF‚ÜíNPF-sound-Helper f x fst snd rewrite weaken-Eq []·¥¥ (x ‚à∑·¥¥ ((‚ü® fst , snd ‚ü©) ‚à∑·¥¥ []·¥¥))  (PF‚ÜíNPF f) | PF‚ÜíNPF-sound f (‚ü® x , snd ‚ü©) = refl





embedd-ST-Ty : ST.Ty ‚Üí Ty
embedd-ST-Ty ST.TyNat = Nat
embedd-ST-Ty (tyA ST.‚áí tyB) = (embedd-ST-Ty tyA) ‚áí (embedd-ST-Ty tyB)


lookupMap : ‚àÄ {A B : Set}{n}  (vs : Vec A n) (f : Fin n) (g : A ‚Üí B) ‚Üí lookup (map g vs) f ‚â° g (lookup vs f) 
lookupMap (x ‚à∑ vs) zero g = refl
lookupMap (v ‚à∑ vs) (suc f) g = lookupMap vs f g

{-# REWRITE   lookupMap #-}


‚Ñï‚ÜíNat : ‚Ñï ‚Üí Fix G-Nat 
‚Ñï‚ÜíNat zero = fold (inj‚ÇÅ tt)
‚Ñï‚ÜíNat (suc n) = fold (inj‚ÇÇ (‚Ñï‚ÜíNat n))

Nat‚Üí‚Ñï : PR-CC-ind-alt.Fix G-Nat ‚Üí ‚Ñï
Nat‚Üí‚Ñï (fold (inj‚ÇÅ x)) = zero
Nat‚Üí‚Ñï (fold (inj‚ÇÇ y)) = suc (Nat‚Üí‚Ñï y)

‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id : ‚àÄ (x) ‚Üí ‚Ñï‚ÜíNat (Nat‚Üí‚Ñï x) ‚â° x
‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id (fold (inj‚ÇÅ x)) = refl
‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id (fold (inj‚ÇÇ y))  = cong fold (cong inj‚ÇÇ (‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id y))

Nat‚Üí‚Ñï‚àò‚Ñï‚ÜíNat‚â°id : ‚àÄ (x) ‚Üí Nat‚Üí‚Ñï ( ‚Ñï‚ÜíNat x) ‚â° x
Nat‚Üí‚Ñï‚àò‚Ñï‚ÜíNat‚â°id zero = refl
Nat‚Üí‚Ñï‚àò‚Ñï‚ÜíNat‚â°id (suc x) = cong suc (Nat‚Üí‚Ñï‚àò‚Ñï‚ÜíNat‚â°id x)

‚Ñï‚ÜíExpNat : ‚àÄ {n}{ctx : Ctx n } ‚Üí  ‚Ñï ‚Üí Exp ctx Nat
‚Ñï‚ÜíExpNat zero = fold (Œπ‚ÇÅ `0)
‚Ñï‚ÜíExpNat (suc n) = fold (Œπ‚ÇÇ (‚Ñï‚ÜíExpNat n))

unCurry  : ‚àÄ {n}  {ctx : Ctx n} {tyA tyB tyC : Ty} ‚Üí Exp ctx (tyA ‚áí (tyB ‚áí tyC))  ‚Üí Exp ctx ((tyA `√ó tyB) ‚áí tyC) 
unCurry {n} {ctx} {tyA}      {tyB} f = Lam (App (App (weaken' [ tyA `√ó tyB ] f) (œÄ‚ÇÅ (Var zero))) (œÄ‚ÇÇ (Var zero)))


embedd-ST : ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí ST.Exp ctx ty ‚Üí Exp (map embedd-ST-Ty ctx) (embedd-ST-Ty ty) 


embedd-ST-P :  ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí (h  : ST.Exp ctx (ty ST.‚áí (ST.TyNat ST.‚áí ty))) ‚Üí (acc : ST.Exp ctx ty) ‚Üí (counter : ST.Exp ctx ST.TyNat) ‚Üí Exp (map embedd-ST-Ty ctx) (embedd-ST-Ty ty)
embedd-ST-P {n} {ctx} {ty} h acc counter = 
          let h' =  (embedd-ST h) 
              acc' = embedd-ST acc
              counter' = embedd-ST counter 
              h'' = Lam (`case (Var zero) 
                  (`# ( weaken' (`ùüô ‚à∑ `ùüô `+ (embedd-ST-Ty ty `√ó Nat) ‚à∑ []) acc' ) (fold (Œπ‚ÇÅ `0))) 
                  
                  (`# 
                      (App (App (weaken' (embedd-ST-Ty ty `√ó Nat ‚à∑ `ùüô `+ (embedd-ST-Ty ty `√ó Nat) ‚à∑ []) h') (œÄ‚ÇÅ (Var zero))) (œÄ‚ÇÇ (Var zero)))  
                      (fold (Œπ‚ÇÇ(œÄ‚ÇÇ (Var zero))))))
              x = (P {n} {map embedd-ST-Ty ctx}  {G-Nat } {(embedd-ST-Ty ty) `√ó  Nat} h'') in 
         œÄ‚ÇÅ(App x (  counter'  ))

embedd-ST {n} {ctx} (ST.Var f)  = Var f
embedd-ST (ST.Lam exp) = Lam (embedd-ST exp)
embedd-ST ST.CZero = fold (Œπ‚ÇÅ `0)
embedd-ST ST.Suc = Lam (fold (Œπ‚ÇÇ (Var zero)))
embedd-ST (ST.App f x) = App (embedd-ST f) (embedd-ST x)
-- embedd-ST {n} {ctx} {ty} (ST.PrecT h acc counter) = 
--         let h' =  (embedd-ST h) 
--             acc' = embedd-ST acc
--             counter' = embedd-ST counter 
--             h'' = Lam (`case (Var zero) 
--                   (`# ( weaken' (`ùüô ‚à∑ `ùüô `+ (embedd-ST-Ty ty `√ó Nat) ‚à∑ []) acc' ) (fold (Œπ‚ÇÅ `0))) 
                  
--                   (`# 
--                       (App (App (weaken' (embedd-ST-Ty ty `√ó Nat ‚à∑ `ùüô `+ (embedd-ST-Ty ty `√ó Nat) ‚à∑ []) h') (œÄ‚ÇÅ (Var zero))) (œÄ‚ÇÇ (Var zero)))  
--                       (œÄ‚ÇÇ (Var zero))))
--             x = (P {n} {map embedd-ST-Ty ctx}  {G-Nat } {(embedd-ST-Ty ty) `√ó  Nat} h'') in 
--          œÄ‚ÇÅ(App x (  counter'  ))
embedd-ST {n} {ctx} {ty} (ST.PrecT h acc counter) = embedd-ST-P {n} {ctx} {ty} h acc counter 
embedd-ST (ST.Nat n) = ‚Ñï‚ÜíExpNat n



embeddTyEval' : ‚àÄ {ty : ST.Ty} ‚Üí    ‚ü¶ (embedd-ST-Ty ty) ‚üß·µÄ ‚Üí ST.evalTy ty
embeddTyEval : ‚àÄ {ty : ST.Ty} ‚Üí   ST.evalTy ty ‚Üí ‚ü¶ (embedd-ST-Ty ty) ‚üß·µÄ 


embeddTyEval' {ST.TyNat} v = Nat‚Üí‚Ñï v
embeddTyEval' {(tyA ST.‚áí tyB)} v = Œª x ‚Üí embeddTyEval' {tyB} (v (embeddTyEval  {tyA} x)) 


embeddTyEval {ST.TyNat} v = ‚Ñï‚ÜíNat v
embeddTyEval {(tyA ST.‚áí tyB)} v = Œª x ‚Üí embeddTyEval {tyB} (v (embeddTyEval' {tyA} x))





embeddTyEval‚àòembeddTyEval'‚â°id : ‚àÄ {ty : ST.Ty } (v : ‚ü¶ (embedd-ST-Ty ty) ‚üß·µÄ) ‚Üí embeddTyEval (embeddTyEval' {ty} v ) ‚â° v
embeddTyEval‚àòembeddTyEval'‚â°id {ST.TyNat} v = ‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id v
embeddTyEval‚àòembeddTyEval'‚â°id {tyA ST.‚áí tyB} v = extensionality (Œª x ‚Üí 
    (embeddTyEval (embeddTyEval' (v (embeddTyEval (embeddTyEval' x))))) 
        ‚â°‚ü® cong ((Œª x ‚Üí  (embeddTyEval (embeddTyEval' (v x))))) (embeddTyEval‚àòembeddTyEval'‚â°id {tyA} x) ‚ü© 
    embeddTyEval (embeddTyEval' (v x)) 
        ‚â°‚ü® embeddTyEval‚àòembeddTyEval'‚â°id {tyB} (v x) ‚ü© 
    ((v x) ‚àé ))

embeddTyEval'‚àòembeddTyEval‚â°id : ‚àÄ {ty : ST.Ty} (v : ST.evalTy ty) ‚Üí embeddTyEval' (embeddTyEval {ty} v ) ‚â° v
embeddTyEval'‚àòembeddTyEval‚â°id {ST.TyNat} v = Nat‚Üí‚Ñï‚àò‚Ñï‚ÜíNat‚â°id v
embeddTyEval'‚àòembeddTyEval‚â°id {tyA ST.‚áí tyB} v = extensionality (Œª x ‚Üí 
      embeddTyEval' (embeddTyEval (v (embeddTyEval' (embeddTyEval x)))) 
          ‚â°‚ü® cong (Œª x ‚Üí embeddTyEval' (embeddTyEval (v x)))  (embeddTyEval'‚àòembeddTyEval‚â°id {tyA} x)  ‚ü© 
      (embeddTyEval' (embeddTyEval (v x)) 
          ‚â°‚ü® embeddTyEval'‚àòembeddTyEval‚â°id {tyB} (v x) ‚ü© 
      (v x) ‚àé))

{-# REWRITE   embeddTyEval‚àòembeddTyEval'‚â°id #-}

‚Ñï‚ÜíNat‚â°eval‚àò‚Ñï‚ÜíExpNat :  ‚àÄ {n}  {ctx : Ctx n} (x : ‚Ñï) (ctx' : HVec (Œª x ‚Üí ‚ü¶ x ‚üß·µÄ) ctx) ‚Üí  ‚Ñï‚ÜíNat x ‚â° eval (‚Ñï‚ÜíExpNat x) ctx'
‚Ñï‚ÜíNat‚â°eval‚àò‚Ñï‚ÜíExpNat zero ctx = refl
‚Ñï‚ÜíNat‚â°eval‚àò‚Ñï‚ÜíExpNat (suc x) ctx = cong fold (cong inj‚ÇÇ (‚Ñï‚ÜíNat‚â°eval‚àò‚Ñï‚ÜíExpNat x ctx))


lookupMap·¥¥ : ‚àÄ {S T : Set} {F : S ‚Üí Set}{G : T ‚Üí Set}{n}{ss : Vec S n} {res : S ‚Üí T} ‚Üí (i : Fin n) ‚Üí (f : ‚àÄ {s} ‚Üí F s ‚Üí G (res s)) ‚Üí (hvs : HVec F ss) ‚Üí f (hlookup  hvs i ) ‚â° hlookup (map·¥¥' {S}{T}{F}{G}{n}{ss}{res} f hvs) i
lookupMap·¥¥ zero f (x ‚à∑·¥¥ hvs) = refl
lookupMap·¥¥ (suc i) f (x ‚à∑·¥¥ hvs) = lookupMap·¥¥ i f hvs

helper2 :  ‚àÄ  {tyA tyB : ST.Ty} (f : ST.evalTy (tyA ST.‚áí tyB)) (x : ST.evalTy tyA) ‚Üí  embeddTyEval (f x) ‚â°  (embeddTyEval f) (embeddTyEval x)
helper2 {tyA} f x  rewrite embeddTyEval'‚àòembeddTyEval‚â°id x = refl


helper3 :  ‚àÄ  {tyA tyB tyC : ST.Ty} (f : ST.evalTy (tyA ST.‚áí (tyB ST.‚áí tyC))) (x : ST.evalTy tyA) (y : ST.evalTy tyB) ‚Üí  embeddTyEval (f x y) ‚â°  (embeddTyEval f) (embeddTyEval x)(embeddTyEval y)
helper3 {tyA} f x y rewrite  embeddTyEval'‚àòembeddTyEval‚â°id x | embeddTyEval'‚àòembeddTyEval‚â°id y = refl














cong-app2 : ‚àÄ {A B C : Set } {f g : A ‚Üí B ‚Üí C} ‚Üí
           f ‚â° g ‚Üí (x : A) ‚Üí (y : B) ‚Üí f x y ‚â° g x y
cong-app2 refl x y = refl


helper5 : ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí (ctx' : HVec ST.evalTy ctx) ‚Üí (h  : ST.Exp ctx (ty ST.‚áí (ST.TyNat ST.‚áí ty))) ‚Üí (acc : ST.Exp ctx ty) ‚Üí (c : ‚Ñï ) ‚Üí  proj‚ÇÅ
  (foldF
  (Œª x ‚Üí
      eval
      (`case (Var zero)
      (`#
        (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
        (map embedd-ST-Ty ctx) (embedd-ST acc))
        (fold (Œπ‚ÇÅ `0)))
      (`#
        (App
        (App
          (weakenGen []
          [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
          `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
          (map embedd-ST-Ty ctx) (embedd-ST h))
          (œÄ‚ÇÅ (Var zero)))
        (œÄ‚ÇÇ (Var zero)))
        (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
      (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx'))
  (‚Ñï‚ÜíNat c))
    ‚â°
  proj‚ÇÅ
  (PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
  (Œª x ‚Üí
      eval
      (`case (Var zero)
      (`#
        (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
        (map embedd-ST-Ty ctx) (embedd-ST acc))
        (fold (Œπ‚ÇÅ `0)))
      (`#
        (App
        (App
          (weakenGen []
          [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
          `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
          (map embedd-ST-Ty ctx) (embedd-ST h))
          (œÄ‚ÇÅ (Var zero)))
        (œÄ‚ÇÇ (Var zero)))
        (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
      (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
      )
  (‚Ñï‚ÜíNat c))
helper5 {n} {ctx} {ty} ctx' h acc zero = refl
helper5 {n} {ctx} {ty} ctx' h acc ( suc c) = refl



helper6 : ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí (ctx' : HVec ST.evalTy ctx) ‚Üí (h  : ST.Exp ctx (ty ST.‚áí (ST.TyNat ST.‚áí ty))) ‚Üí (acc : ST.Exp ctx ty) ‚Üí (c : ‚Ñï ) ‚Üí  (‚Ñï‚ÜíNat c) ‚â°  (proj‚ÇÇ
       (PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
        (Œª x ‚Üí
           eval
           (`case (Var zero)
            (`#
             (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
              (map embedd-ST-Ty ctx) (embedd-ST acc))
             (fold (Œπ‚ÇÅ `0)))
            (`#
             (App
              (App
               (weakenGen []
                [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
                `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
                (map embedd-ST-Ty ctx) (embedd-ST h))
               (œÄ‚ÇÅ (Var zero)))
              (œÄ‚ÇÇ (Var zero)))
             (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
           (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
           )
        (‚Ñï‚ÜíNat c)))
helper6 {n} {ctx} {ty} ctx' h acc zero = refl
helper6 {n} {ctx} {ty} ctx' h acc (suc c) = cong fold (cong inj‚ÇÇ (helper6 {n} {ctx} {ty} ctx' h acc c))

embedd-ST-sound : ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí (ctx' : HVec ST.evalTy ctx) ‚Üí (sTExp : ST.Exp ctx ty)  ‚Üí embeddTyEval {ty} ((ST.evalExp sTExp ctx') ) ‚â°  ( eval (embedd-ST sTExp) (map·¥¥' (embeddTyEval) ctx') ) 


helper4 : ‚àÄ {n}  {ctx : ST.Ctx n} {ty} ‚Üí (ctx' : HVec ST.evalTy ctx) ‚Üí (h  : ST.Exp ctx (ty ST.‚áí (ST.TyNat ST.‚áí ty))) ‚Üí (acc : ST.Exp ctx ty) ‚Üí (c : ‚Ñï ) ‚Üí embeddTyEval
      (para (ST.evalExp h ctx') (ST.evalExp acc ctx') c)
      ‚â°
      proj‚ÇÅ
      (foldF
       (Œª x ‚Üí
          eval
          (`case (Var zero)
           (`#
            (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
             (map embedd-ST-Ty ctx) (embedd-ST acc))
            (fold (Œπ‚ÇÅ `0)))
           (`#
            (App
             (App
              (weakenGen []
               [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
               `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
               (map embedd-ST-Ty ctx) (embedd-ST h))
              (œÄ‚ÇÅ (Var zero)))
             (œÄ‚ÇÇ (Var zero)))
            (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))    ))
          (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
          )
       (‚Ñï‚ÜíNat c))

       
helper4 ctx' h acc  zero rewrite embedd-ST-sound ctx' acc = sym (weaken'-Eq (tt ‚à∑·¥¥ (inj‚ÇÅ tt ‚à∑·¥¥  []·¥¥)) (map·¥¥' embeddTyEval ctx') (embedd-ST acc))
helper4 {n} {ctx} {ty} ctx' h acc  (suc c) rewrite weaken'-Eq {ctxB = [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
       `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ] }{ctxC = map embedd-ST-Ty ctx}  ( PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
       (Œª x ‚Üí
          eval
          (`case (Var zero)
           (`#
            (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
             (map embedd-ST-Ty ctx) (embedd-ST acc))
            (fold (Œπ‚ÇÅ `0)))
           (`#
            (App
             (App
              (weakenGen []
               [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
               `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
               (map embedd-ST-Ty ctx) (embedd-ST h))
              (œÄ‚ÇÅ (Var zero)))
             (œÄ‚ÇÇ (Var zero)))
            (fold (Œπ‚ÇÇ(œÄ‚ÇÇ (Var zero))))))
          (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
          )
       (‚Ñï‚ÜíNat c) ‚à∑·¥¥ 
       
       (inj‚ÇÇ
        (PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
         (Œª x ‚Üí
            eval
            (`case (Var zero)
             (`#
              (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
               (map embedd-ST-Ty ctx) (embedd-ST acc))
              (fold (Œπ‚ÇÅ `0)))
             (`#
              (App
               (App
                (weakenGen []
                 [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
                 `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
                 (map embedd-ST-Ty ctx) (embedd-ST h))
                (œÄ‚ÇÅ (Var zero)))
               (œÄ‚ÇÇ (Var zero)))
              (fold (Œπ‚ÇÇ(œÄ‚ÇÇ (Var zero))))))
            (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
            )
         (‚Ñï‚ÜíNat c)) ‚à∑·¥¥ []·¥¥) ) (map·¥¥' embeddTyEval ctx') ((embedd-ST h)) | helper5 {n} {ctx} {ty} ctx' h acc c = 
         
          (embeddTyEval (ST.evalExp h ctx' (para (ST.evalExp h ctx') (ST.evalExp acc ctx') c) c)) 
              ‚â°‚ü® helper3  (ST.evalExp h ctx') ((para (ST.evalExp h ctx') (ST.evalExp acc ctx') c)) c  ‚ü© 
          ((embeddTyEval (ST.evalExp h ctx'))    (embeddTyEval ((para (ST.evalExp h ctx') (ST.evalExp acc ctx') c))) (embeddTyEval c) 
              ‚â°‚ü® cong-app2 (embedd-ST-sound ctx' h) (embeddTyEval ((para (ST.evalExp h ctx') (ST.evalExp acc ctx') c))) (embeddTyEval c) ‚ü© 
          eval (embedd-ST h) (map·¥¥' embeddTyEval ctx')(embeddTyEval (para (ST.evalExp h ctx') (ST.evalExp acc ctx') c))(‚Ñï‚ÜíNat c) 
              ‚â°‚ü® cong‚ÇÇ (eval (embedd-ST h) (map·¥¥' embeddTyEval ctx')) {u = (‚Ñï‚ÜíNat c)} {v = (‚Ñï‚ÜíNat c)}  (helper4 ctx' h acc c) refl  ‚ü©  
          eval (embedd-ST h) (map·¥¥' embeddTyEval ctx')
      (proj‚ÇÅ
       (foldF
        (Œª x ‚Üí
           eval
           (`case (Var zero)
            (`#
             (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
              (map embedd-ST-Ty ctx) (embedd-ST acc))
             (fold (Œπ‚ÇÅ `0)))
            (`#
             (App
              (App
               (weakenGen []
                [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
                `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
                (map embedd-ST-Ty ctx) (embedd-ST h))
               (œÄ‚ÇÅ (Var zero)))
              (œÄ‚ÇÇ (Var zero)))
             (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
           (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
           )
        (‚Ñï‚ÜíNat c)))
      (‚Ñï‚ÜíNat c) 
                  ‚â°‚ü® cong‚ÇÇ (eval (embedd-ST h) (map·¥¥' embeddTyEval ctx')) (helper5 {n} {ctx} {ty} ctx' h acc c) ((helper6 {n} {ctx} {ty} ctx' h acc c))  ‚ü© 
                  
      (eval (embedd-ST h) (map·¥¥' embeddTyEval ctx')
      (proj‚ÇÅ
       (PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
        (Œª x ‚Üí
           eval
           (`case (Var zero)
            (`#
             (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
              (map embedd-ST-Ty ctx) (embedd-ST acc))
             (fold (Œπ‚ÇÅ `0)))
            (`#
             (App
              (App
               (weakenGen []
                [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
                `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
                (map embedd-ST-Ty ctx) (embedd-ST h))
               (œÄ‚ÇÅ (Var zero)))
              (œÄ‚ÇÇ (Var zero)))
             (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
           (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
           )
        (‚Ñï‚ÜíNat c)))
      (proj‚ÇÇ
       (PR-CC-ind-alt.mapFold `t (`ùüô `+ `t)
        (Œª x ‚Üí
           eval
           (`case (Var zero)
            (`#
             (weakenGen [] [ `ùüô , `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
              (map embedd-ST-Ty ctx) (embedd-ST acc))
             (fold (Œπ‚ÇÅ `0)))
            (`#
             (App
              (App
               (weakenGen []
                [ embedd-ST-Ty ty `√ó ind (`ùüô `+ `t) ,
                `ùüô `+ (embedd-ST-Ty ty `√ó ind (`ùüô `+ `t)) ]
                (map embedd-ST-Ty ctx) (embedd-ST h))
               (œÄ‚ÇÅ (Var zero)))
              (œÄ‚ÇÇ (Var zero)))
             (fold (Œπ‚ÇÇ (œÄ‚ÇÇ (Var zero))))))
           (x ‚à∑·¥¥ map·¥¥' embeddTyEval ctx')
           )
        (‚Ñï‚ÜíNat c)))) ‚àé )



embedd-ST-sound  ( ctx') (ST.Var ( f)) = lookupMap·¥¥ f embeddTyEval ctx' 
embedd-ST-sound ctx' (ST.Lam exp) = extensionality (Œª x ‚Üí embedd-ST-sound (embeddTyEval' x ‚à∑·¥¥ ctx') exp)
embedd-ST-sound ctx' ST.CZero = refl
embedd-ST-sound ctx' ST.Suc = extensionality (Œª x ‚Üí cong fold (cong inj‚ÇÇ (‚Ñï‚ÜíNat‚àòNat‚Üí‚Ñï‚â°id x) ))
embedd-ST-sound {ty = ty} ctx' (ST.App f x) rewrite sym (embedd-ST-sound ctx' f) |  sym (embedd-ST-sound ctx' x) | embeddTyEval'‚àòembeddTyEval‚â°id (ST.evalExp x ctx') = refl 
embedd-ST-sound ctx' (ST.Nat x) = ‚Ñï‚ÜíNat‚â°eval‚àò‚Ñï‚ÜíExpNat x ((map·¥¥' (embeddTyEval) ctx'))
embedd-ST-sound {n} {ctx} {ty} ctx' (ST.PrecT h acc counter) rewrite sym (embedd-ST-sound ctx' counter)  with ST.evalExp counter ctx'
... | c  =  helper4 ctx' h acc c
