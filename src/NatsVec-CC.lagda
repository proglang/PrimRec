\begin{code}
module NatsVec-CC where

import Relation.Binary.PropositionalEquality as Eq
open Eq
  using (_‚â°_; _‚â¢_; refl; sym; trans; cong; cong‚ÇÇ; subst)
open Eq.‚â°-Reasoning using (begin_; _‚â°‚ü®‚ü©_; step-‚â°Àò; step-‚â°; _‚àé)
open import Data.Fin using (Fin; suc; zero)
open import Data.Nat using (‚Ñï; suc; zero; _+_)
open import Data.Product using (_√ó_; proj‚ÇÅ; proj‚ÇÇ; <_,_>) renaming (_,_ to ‚ü®_,_‚ü©)
open import Data.Unit using (‚ä§; tt)
open import Data.Vec using (Vec; []; _‚à∑_; _++_; lookup)


open import Utils

import PR-NatsVec as NV
open import PR-CC as CC

-- type translation

T‚ü¶_‚üß·µÄ : ‚Ñï ‚Üí Ty
T‚ü¶ zero ‚üß·µÄ = `ùüô
T‚ü¶ suc m ‚üß·µÄ = `‚Ñï `√ó T‚ü¶ m ‚üß·µÄ

-- value translation

T‚ü¶_‚üß‚±Ω : Vec ‚Ñï m ‚Üí ‚ü¶ T‚ü¶ m ‚üß·µÄ ‚üß·µÄ
T‚ü¶ [] ‚üß‚±Ω = tt
T‚ü¶ x ‚à∑ v ‚üß‚±Ω = ‚ü® x , T‚ü¶ v ‚üß‚±Ω ‚ü©

-- some type isomorphisms

identÀ° : `ùüô `√ó T ‚Üí·¥æ T
identÀ° = œÄ‚ÇÇ

ident ≥ : T `√ó `ùüô ‚Üí·¥æ T
ident ≥ = œÄ‚ÇÅ

assocÀ° : (T `√ó U) `√ó V ‚Üí·¥æ T `√ó (U `√ó V)
assocÀ° = `# (C œÄ‚ÇÅ œÄ‚ÇÅ) (`# (C œÄ‚ÇÇ œÄ‚ÇÅ) œÄ‚ÇÇ)

assoc ≥ : T `√ó (U `√ó V) ‚Üí·¥æ (T `√ó U) `√ó V
assoc ≥ = `# (`# œÄ‚ÇÅ (C œÄ‚ÇÅ œÄ‚ÇÇ)) (C œÄ‚ÇÇ œÄ‚ÇÇ)

iso-+ : ‚àÄ n o ‚Üí T‚ü¶ n ‚üß·µÄ `√ó T‚ü¶ o ‚üß·µÄ ‚Üí·¥æ T‚ü¶ n + o ‚üß·µÄ
iso-+ zero o = identÀ°
iso-+ (suc n) o = C (`# œÄ‚ÇÅ (C (iso-+ n o) œÄ‚ÇÇ)) assocÀ°

ilookup : (i : Fin m) ‚Üí T‚ü¶ m ‚üß·µÄ ‚Üí·¥æ `‚Ñï
ilookup zero = œÄ‚ÇÅ
ilookup (suc i) = C (ilookup i) œÄ‚ÇÇ

-- expression translation

T‚ü¶_‚üß : NV.PR m n ‚Üí T‚ü¶ m ‚üß·µÄ ‚Üí·¥æ T‚ü¶ n ‚üß·µÄ
T‚ü¶ NV.`0 ‚üß = `0
T‚ü¶ NV.Z ‚üß = `# Z `0
T‚ü¶ NV.œÉ ‚üß = `# (C œÉ œÄ‚ÇÅ) `0
T‚ü¶ NV.œÄ i ‚üß = `# (ilookup i) `0
T‚ü¶ NV.C f g ‚üß = C T‚ü¶ f ‚üß T‚ü¶ g ‚üß
T‚ü¶ NV.‚ôØ f g ‚üß = C (iso-+ _ _) (`# T‚ü¶ f ‚üß T‚ü¶ g ‚üß)
T‚ü¶ NV.P g h ‚üß = P T‚ü¶ g ‚üß (C (C T‚ü¶ h ‚üß (iso-+ _ _)) assocÀ°)
T‚ü¶ NV.P' g h ‚üß = P T‚ü¶ g ‚üß (C (C T‚ü¶ h ‚üß (iso-+ _ _)) assocÀ°)

lemma-lookup : (v : Vec ‚Ñï m) (i : Fin m) ‚Üí lookup v i ‚â°  ‚ü¶ ilookup i ‚üß·¥± T‚ü¶ v ‚üß‚±Ω
lemma-lookup (x ‚à∑ _) zero = refl
lemma-lookup (_ ‚à∑ v) (suc i) = lemma-lookup v i

lemma-iso-+ : (v : Vec ‚Ñï n) (w : Vec ‚Ñï o) ‚Üí T‚ü¶ v ++ w ‚üß‚±Ω ‚â° ‚ü¶ iso-+ n o ‚üß·¥± ‚ü® T‚ü¶ v ‚üß‚±Ω , T‚ü¶ w ‚üß‚±Ω ‚ü©
lemma-iso-+ [] w = refl
lemma-iso-+ (x ‚à∑ v) w rewrite  lemma-iso-+ v w = refl

{-# TERMINATING #-}
sound : ‚àÄ (p : NV.PR m n) (v : Vec ‚Ñï m) ‚Üí T‚ü¶ NV.eval p v ‚üß‚±Ω ‚â° ‚ü¶ T‚ü¶ p ‚üß ‚üß·¥± T‚ü¶ v ‚üß‚±Ω
sound NV.`0 v = refl
sound NV.Z [] = refl
sound NV.œÉ [ x ] = refl
sound (NV.œÄ i) v rewrite lemma-lookup v i = refl
sound (NV.C f g) v rewrite sound f (NV.eval g v) | sound g v = refl
sound (NV.‚ôØ f g) v rewrite sym (sound f v) | sym (sound g v) = lemma-iso-+ (NV.eval f v) (NV.eval g v)
sound (NV.P g h) (zero ‚à∑ v) = sound g v
sound (NV.P g h) (suc i ‚à∑ v)
  rewrite
  sound h (NV.eval (NV.P g h) (i ‚à∑ v) ++ i ‚à∑ v)
  = cong ‚ü¶ T‚ü¶ h ‚üß ‚üß·¥± (trans (lemma-iso-+ (NV.eval (NV.P g h) (i ‚à∑ v)) (i ‚à∑ v))
                           (cong (Œª ih ‚Üí ‚ü¶ iso-+ _ _ ‚üß·¥± ‚ü® ih , ‚ü® i , T‚ü¶ v ‚üß‚±Ω ‚ü© ‚ü©)
                                 (sound (NV.P g h) (i ‚à∑ v))))
sound (NV.P' g h) (zero ‚à∑ v) = sound g v
sound (NV.P' g h) (suc i ‚à∑ v) 
  rewrite
  sound h (NV.eval (NV.P' g h) (i ‚à∑ v) ++ i ‚à∑ v)
  = cong ‚ü¶ T‚ü¶ h ‚üß ‚üß·¥± (trans (lemma-iso-+ (NV.eval (NV.P' g h) (i ‚à∑ v)) (i ‚à∑ v))
                           (cong (Œª ih ‚Üí ‚ü¶ iso-+ _ _ ‚üß·¥± ‚ü® ih , ‚ü® i , T‚ü¶ v ‚üß‚±Ω ‚ü© ‚ü©)
                                 (sound (NV.P' g h) (i ‚à∑ v))))

\end{code}
